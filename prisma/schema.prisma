generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  logo      String?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  packages  Package[]

  @@map("providers")
}

model Package {
  id                     String         @id @default(cuid())
  name                   String
  providerId             String
  type                   String
  speed                  String?
  data                   String?
  aup                    String?
  throttle               String?
  fupLimit               String?
  throttleSpeed          String?
  secondaryThrottleSpeed String?
  fupDescription         String?
  specialTerms           String?
  technology             String?
  coverage               String?
  installation           String?
  basePrice              Float
  currentPrice           Float
  active                 Boolean        @default(true)
  featured               Boolean        @default(false)
  promoBadge             String?
  promoBadgeColor        String?
  promoBadgeExpiryDate   DateTime?
  promoBadgeTimer        Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  applications           Application[]
  bills                  Bill[]
  orders                 Order[]
  packageUrls            PackageUrl[]
  provider               Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  priceHistory           PriceHistory[]
  promotions             Promotion[]
  specialRates           SpecialRate[]
  users                  User[]

  @@map("packages")
}

model PriceHistory {
  id        String   @id @default(cuid())
  packageId String
  oldPrice  Float
  newPrice  Float
  changedBy String
  reason    String?
  createdAt DateTime @default(now())
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model Promotion {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  description    String?
  packageId      String?
  discountType   String
  discountValue  Float
  startDate      DateTime
  endDate        DateTime
  usageLimit     Int      @default(1)
  timesUsed      Int      @default(0)
  targetAudience String?
  userSpecific   String?
  minimumOrders  Int?
  stackable      Boolean  @default(false)
  autoApply      Boolean  @default(false)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]
  package        Package? @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("promotions")
}

model SpecialRate {
  id            String    @id @default(cuid())
  packageId     String
  userId        String?
  email         String?
  name          String?
  discountType  String
  discountValue Float
  expiresAt     DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  package       Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id])

  @@map("special_rates")
}

model PackageUrl {
  id        String    @id @default(cuid())
  packageId String
  slug      String    @unique
  params    String?
  expiresAt DateTime?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  package   Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("package_urls")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  password           String?
  firstName          String?
  lastName           String?
  name               String?
  phone              String?
  address            String?
  city               String?
  province           String?
  postalCode         String?
  idNumber           String?
  applicationStatus  ApplicationStatus @default(PENDING_APPROVAL)
  serviceStatus      ServiceStatus     @default(NOT_ACTIVE)
  applicationDate    DateTime          @default(now())
  approvedAt         DateTime?
  approvedBy         String?
  rejectedAt         DateTime?
  rejectionReason    String?
  activationDate     DateTime?
  serviceAddress     Json?
  packageId          String?
  installationNotes  String?
  tempPassword       String?
  mustChangePassword Boolean           @default(true)
  role               String            @default("USER")
  emailVerified      Boolean           @default(false)
  active             Boolean           @default(true)
  image              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  accounts           Account[]
  applications       Application[]
  bills              Bill[]
  dataConsents       DataConsent[]
  orders             Order[]
  payments           Payment[]
  sessions           Session[]
  specialRates       SpecialRate[]
  selectedPackage    Package?          @relation(fields: [packageId], references: [id])
  whatsappMessages   WhatsAppMessage[]

  @@map("users")
}

model Application {
  id                   String            @id @default(cuid())
  applicationNumber    String            @unique
  userId               String
  packageId            String
  serviceAddress       Json
  contactNumber        String
  preferredInstallDate DateTime?
  specialRequirements  String?
  idDocument           String?
  proofOfResidence     String?
  status               ApplicationStatus @default(PENDING_APPROVAL)
  submittedAt          DateTime          @default(now())
  reviewedAt           DateTime?
  reviewedBy           String?
  reviewNotes          String?
  approvalReason       String?
  rejectionReason      String?
  adminComments        String?
  serviceAvailable     Boolean?
  estimatedInstallDate DateTime?
  package              Package           @relation(fields: [packageId], references: [id])
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments             Payment[]

  @@map("applications")
}

model Bill {
  id               String     @id @default(cuid())
  billNumber       String     @unique
  userId           String
  packageId        String?
  amount           Decimal    @db.Decimal(10, 2)
  vatAmount        Decimal    @db.Decimal(10, 2)
  totalAmount      Decimal    @db.Decimal(10, 2)
  periodStart      DateTime
  periodEnd        DateTime
  dueDate          DateTime
  billType         BillType   @default(MONTHLY)
  description      String?
  status           BillStatus @default(PENDING)
  paidAt           DateTime?
  suspensionDate   DateTime?
  paymentReference String?
  paymentMethod    String?
  package          Package?   @relation(fields: [packageId], references: [id])
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments         Payment[]

  @@map("bills")
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  billId                String?
  applicationId         String?
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("ZAR")
  description           String?
  provider              String        @default("ozow")
  reference             String        @unique
  providerTransactionId String?       @unique
  providerStatus        String?
  metadata              Json?
  status                PaymentStatus @default(PENDING)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  completedAt           DateTime?
  application           Application?  @relation(fields: [applicationId], references: [id])
  bill                  Bill?         @relation(fields: [billId], references: [id], onDelete: Cascade)
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model EmailLog {
  id          String    @id @default(cuid())
  userId      String?
  adminEmail  String?
  to          String
  subject     String
  emailType   EmailType
  status      String
  brevoId     String?
  brevoStatus String?
  content     String?
  error       String?
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?

  @@map("email_logs")
}

model Order {
  id               String     @id @default(cuid())
  userId           String
  packageId        String
  promotionId      String?
  status           String     @default("PENDING")
  originalPrice    Float
  discountAmount   Float      @default(0)
  finalPrice       Float
  installationDate DateTime?
  notes            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  documents        Document[]
  package          Package    @relation(fields: [packageId], references: [id], onDelete: Cascade)
  promotion        Promotion? @relation(fields: [promotionId], references: [id])
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Document {
  id        String   @id @default(cuid())
  orderId   String
  type      String
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verifications")
}

model WhatsAppMessage {
  id             String                   @id @default(cuid())
  messageId      String                   @unique
  direction      WhatsAppMessageDirection
  fromNumber     String
  toNumber       String
  messageBody    String
  profileName    String?
  whatsappId     String?
  status         WhatsAppMessageStatus    @default(PENDING)
  mediaCount     Int                      @default(0)
  mediaUrls      Json?
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  receivedAt     DateTime?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  userId         String?
  isAutoResponse Boolean                  @default(false)
  escalated      Boolean                  @default(false)
  user           User?                    @relation(fields: [userId], references: [id])

  @@map("whatsapp_messages")
}

model DataConsent {
  id                String    @id @default(cuid())
  userId            String
  dataCategory      String
  processingPurpose String
  legalBasis        String
  consentGiven      Boolean
  consentDate       DateTime
  withdrawnAt       DateTime?
  ipAddress         String
  userAgent         String
  version           String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dataCategory, processingPurpose])
  @@map("data_consents")
}

model DataProcessingLog {
  id           String   @id @default(cuid())
  userId       String
  action       String
  dataCategory String
  purpose      String
  adminUser    String?
  ipAddress    String
  userAgent    String
  dataFields   String
  timestamp    DateTime @default(now())

  @@index([userId, timestamp])
  @@index([adminUser, timestamp])
  @@map("data_processing_logs")
}

model RicaCommunicationLog {
  id                String   @id @default(cuid())
  hashedFromNumber  String
  hashedToNumber    String
  messageHash       String
  communicationType String
  direction         String
  messageLength     Int
  timestamp         DateTime @default(now())
  retentionPeriod   DateTime

  @@index([hashedFromNumber, timestamp])
  @@index([hashedToNumber, timestamp])
  @@index([retentionPeriod])
  @@map("rica_communication_logs")
}

model SecurityAuditLog {
  id        String   @id @default(cuid())
  eventType String
  userId    String?
  ipAddress String
  userAgent String
  success   Boolean
  details   Json?
  riskLevel String
  timestamp DateTime @default(now())

  @@index([eventType, timestamp])
  @@index([userId, timestamp])
  @@index([riskLevel, timestamp])
  @@map("security_audit_logs")
}

model DataRetentionPolicy {
  id              String   @id @default(cuid())
  dataCategory    String   @unique
  retentionPeriod Int
  legalBasis      String
  autoDelete      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("data_retention_policies")
}

enum ApplicationStatus {
  PENDING_APPROVAL
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_INFO
  CANCELLED
}

enum ServiceStatus {
  NOT_ACTIVE
  PENDING_PAYMENT
  PENDING_INSTALLATION
  ACTIVE
  SUSPENDED
  CANCELLED
  TERMINATED
}

enum BillStatus {
  PENDING
  OVERDUE
  SUSPENDED
  PAID
  CANCELLED
  PARTIAL_PAYMENT
}

enum BillType {
  MONTHLY
  PRORATA
  SETUP
  CANCELLATION
  ADJUSTMENT
}

enum PaymentMethod {
  OZOW
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_ORDER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum EmailType {
  WELCOME
  APPROVAL
  REJECTION
  ADMIN_NOTIFICATION
  INVOICE
  PAYMENT_CONFIRMATION
  PAYMENT_REMINDER
  SUSPENSION_WARNING
  SERVICE_ACTIVATION
  PASSWORD_RESET
  GENERAL
}

enum WhatsAppMessageDirection {
  INCOMING
  OUTGOING
  ESCALATION
}

enum WhatsAppMessageStatus {
  PENDING
  SENT
  DELIVERED
  DEMO_SENT
  READ
  FAILED
  RECEIVED
  ESCALATED
}
